import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

def plot_churn_distribution(df):
    """V·∫Ω bi·ªÉu ƒë·ªì ph√¢n b·ªë c·ªßa c·ªôt Churn."""
    plt.figure(figsize=(6,4))
    ax = sns.countplot(data=df, x='Churn')
    plt.title('Ph√¢n b·ªë Churn (0=No, 1=Yes)')
    total = len(df)
    for p in ax.patches:
        percentage = f'{100 * p.get_height() / total:.1f}%'
        x = p.get_x() + p.get_width() / 2
        y = p.get_height()
        ax.annotate(percentage, (x, y), ha='center', va='bottom')
    plt.show()

def plot_churn_by_gender(df):
    """V·∫Ω bi·ªÉu ƒë·ªì t·ª∑ l·ªá Churn theo gi·ªõi t√≠nh."""
    churn_by_gender = df.groupby('gender')['Churn'].value_counts(normalize=True).unstack().mul(100)
    ax = churn_by_gender.plot(kind='bar', stacked=False, figsize=(6, 4), color=['skyblue', 'salmon'])
    plt.title('T·ª∑ l·ªá Churn theo gi·ªõi t√≠nh')
    plt.ylabel('T·ª∑ l·ªá (%)')
    plt.xticks(rotation=0)
    plt.legend(title='Churn', labels=['No', 'Yes'])
    for container in ax.containers:
        ax.bar_label(container, fmt='%.1f%%', label_type='edge', fontsize=10)
    plt.tight_layout()
    plt.show()

def plot_churn_by_contract(df):
    """V·∫Ω bi·ªÉu ƒë·ªì t·ª∑ l·ªá Churn theo lo·∫°i h·ª£p ƒë·ªìng."""
    plt.figure(figsize=(8,4))
    sns.countplot(data=df, x='Contract', hue='Churn')
    plt.title('Contract vs Churn')
    plt.legend(title='Churn', labels=['No', 'Yes'])
    plt.show()

def plot_churn_by_internet_service(df):
    """V·∫Ω bi·ªÉu ƒë·ªì t·ª∑ l·ªá Churn theo lo·∫°i d·ªãch v·ª• internet."""
    plt.figure(figsize=(8,4))
    sns.countplot(data=df, x='InternetService', hue='Churn')
    plt.title('InternetService vs Churn')
    plt.legend(title='Churn', labels=['No', 'Yes'])
    plt.show()

def plot_tenure_distribution_by_churn(df):
    """V·∫Ω bi·ªÉu ƒë·ªì ph√¢n ph·ªëi th·ªùi gian g·∫Øn b√≥ (tenure) theo Churn."""
    plt.figure(figsize=(8,4))
    sns.histplot(data=df, x='tenure', hue='Churn', multiple='stack', bins=30)
    plt.title('Ph√¢n ph·ªëi Tenure theo Churn')
    plt.show()

def plot_monthly_charges_distribution_by_churn(df):
    """V·∫Ω bi·ªÉu ƒë·ªì ph√¢n ph·ªëi chi ph√≠ h√†ng th√°ng theo Churn."""
    plt.figure(figsize=(8,4))
    sns.histplot(data=df, x='MonthlyCharges', hue='Churn', multiple='stack', bins=30)
    plt.title('Ph√¢n ph·ªëi MonthlyCharges theo Churn')
    plt.show()

def plot_total_charges_distribution_by_churn(df):
    """V·∫Ω bi·ªÉu ƒë·ªì ph√¢n ph·ªëi t·ªïng chi ph√≠ theo Churn."""
    plt.figure(figsize=(8,4))
    sns.histplot(data=df, x='TotalCharges', hue='Churn', multiple='stack', bins=30)
    plt.title('Ph√¢n ph·ªëi TotalCharges theo Churn')
    plt.legend(title='Churn', labels=['No', 'Yes'])
    plt.show()

def plot_tenure_group_churn(df):
    """V·∫Ω bi·ªÉu ƒë·ªì t·ª∑ l·ªá Churn theo nh√≥m th·ªùi gian g·∫Øn b√≥."""
    data_copy = df.copy()
    data_copy['tenure_group'] = pd.cut(data_copy['tenure'], bins=[0, 12, 24, 36, 48, 60, 72],
                                labels=['0-12', '13-24', '25-36', '37-48', '49-60', '61-72'])
    plt.figure(figsize=(8, 5))
    sns.countplot(data=data_copy, x="tenure_group", hue="Churn", palette="Set2")
    plt.title("T·ªâ l·ªá r·ªùi b·ªè theo nh√≥m th·ªùi gian g·∫Øn b√≥ (tenure)")
    plt.xlabel("Nh√≥m th·ªùi gian g·∫Øn b√≥ (th√°ng)")
    plt.ylabel("S·ªë l∆∞·ª£ng kh√°ch h√†ng")
    plt.show()

def plot_numeric_heatmap(df):
    """V·∫Ω heatmap ma tr·∫≠n t∆∞∆°ng quan cho c√°c ƒë·∫∑c tr∆∞ng s·ªë."""
    num_cols = df.select_dtypes(include=['int64', 'float64']).columns
    plt.figure(figsize=(6,4))
    sns.heatmap(df[num_cols].corr(), annot=True, fmt=".2f", cmap='coolwarm')
    plt.title('Ma tr·∫≠n t∆∞∆°ng quan (numeric)')
    plt.show()

def plot_service_usage(df):
    """T√≠nh to√°n v√† v·∫Ω bi·ªÉu ƒë·ªì t·ª∑ l·ªá s·ª≠ d·ª•ng c√°c d·ªãch v·ª•."""
    service_cols = [
        'PhoneService', 'MultipleLines', 'OnlineSecurity', 'OnlineBackup',
        'DeviceProtection', 'TechSupport', 'StreamingTV', 'StreamingMovies'
    ]
    # Gi·∫£ ƒë·ªãnh 'Yes' nghƒ©a l√† s·ª≠ d·ª•ng, c√°c gi√° tr·ªã kh√°c nghƒ©a l√† kh√¥ng s·ª≠ d·ª•ng
    df_service = df[service_cols].applymap(lambda x: 1 if x == 'Yes' else 0)
    service_usage = round(df_service.mean().sort_values(ascending=False) * 100, 2)

    print("üîù Top 3 d·ªãch v·ª• ƒë∆∞·ª£c s·ª≠ d·ª•ng nhi·ªÅu nh·∫•t:")
    print(service_usage.head(3))
    print("\nüîª Top 3 d·ªãch v·ª• ƒë∆∞·ª£c s·ª≠ d·ª•ng √≠t nh·∫•t:")
    print(service_usage.tail(3))

    plt.figure(figsize=(10,5))
    service_usage.sort_values(ascending=True).plot(kind='barh', color='skyblue')
    plt.title("T·ª∑ l·ªá kh√°ch h√†ng s·ª≠ d·ª•ng t·ª´ng d·ªãch v·ª• (%)")
    plt.xlabel("T·ª∑ l·ªá s·ª≠ d·ª•ng (Yes)")
    plt.ylabel("D·ªãch v·ª•")
    plt.show()


if __name__ == '__main__':
    # V√≠ d·ª• s·ª≠ d·ª•ng: Load d·ªØ li·ªáu ƒë√£ x·ª≠ l√Ω v√† ch·∫°y c√°c h√†m EDA
    # Trong m√¥i tr∆∞·ªùng th·ª±c t·∫ø, b·∫°n s·∫Ω load d·ªØ li·ªáu ƒë√£ ti·ªÅn x·ª≠ l√Ω ·ªü ƒë√¢y.
    # ƒê·ªÉ minh h·ªça, ch√∫ng ta s·∫Ω s·ª≠ d·ª•ng bi·∫øn df_processed t·ª´ tr·∫°ng th√°i notebook
    # Trong m·ªôt script ƒë·ªôc l·∫≠p, b·∫°n th∆∞·ªùng s·∫Ω load d·ªØ li·ªáu:
    # from preprocessing import preprocess_inputs
    # df = pd.read_csv('WA_Fn-UseC_-Telco-Customer-Churn.csv')
    # df_processed = preprocess_inputs(df)

    # Gi·∫£ ƒë·ªãnh df_processed c√≥ s·∫µn trong m√¥i tr∆∞·ªùng ƒë·ªÉ minh h·ªça
    # N·∫øu ch·∫°y nh∆∞ m·ªôt script, b·∫°n c·∫ßn load/ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu
    try:
        # Ph·∫ßn n√†y d√πng ƒë·ªÉ minh h·ªça trong m√¥i tr∆∞·ªùng notebook
        # Trong m·ªôt script ƒë·ªôc l·∫≠p, b·∫°n s·∫Ω load d·ªØ li·ªáu ·ªü ƒë√¢y
        print("ƒêang ch·∫°y EDA v·ªõi df_processed c√≥ s·∫µn...")
        plot_churn_distribution(df_processed)
        plot_churn_by_gender(df_processed)
        plot_churn_by_contract(df_processed)
        plot_churn_by_internet_service(df_processed)
        plot_tenure_distribution_by_churn(df_processed)
        plot_monthly_charges_distribution_by_churn(df_processed)
        plot_total_charges_distribution_by_churn(df_processed)
        plot_tenure_group_churn(df_processed)
        plot_numeric_heatmap(df_processed)
        plot_service_usage(df_processed)

    except NameError:
        print("Kh√¥ng t√¨m th·∫•y df_processed. Vui l√≤ng ƒë·∫£m b·∫£o d·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c load v√† ti·ªÅn x·ª≠ l√Ω.")
        print("ƒê·ªÉ ch·∫°y script n√†y ƒë·ªôc l·∫≠p, b·ªè comment ph·∫ßn load/ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu.")
